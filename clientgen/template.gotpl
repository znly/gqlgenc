{{ reserveImport "bytes" }}
{{ reserveImport "context" }}
{{ reserveImport "encoding/json" }}
{{ reserveImport "fmt" }}
{{ reserveImport "io" }}
{{ reserveImport "io/ioutil" }}
{{ reserveImport "net/http" }}
{{ reserveImport "net/url" }}
{{ reserveImport "path" }}
{{ reserveImport "time" }}

{{ reserveImport "golang.org/x/xerrors" }}

{{ reserveImport "github.com/Yamashou/gqlgenc/graphqljson" }}
{{ reserveImport "github.com/Yamashou/gqlgenc/client" }}

//easyjson:skip
type Client struct {
	Client *client.Client
}

//easyjson:skip
type SubscriptionClient struct {
    Client *client.SubscriptionClient
}

func NewClient(
    clientPool client.ClientPool,
    options []client.HTTPRequestOption,
    callbacks []client.HTTPResponseCallback,
) *Client {
	return &Client{Client: client.NewClient(clientPool, options, callbacks)}
}

func NewSubscriptionClient(wsURI string) *SubscriptionClient {
    return &SubscriptionClient{Client: client.NewSubscriptionClient(wsURI)}
}

type {{ .Query.Name | go }} {{ .Query.Type | ref }}

type {{ .Mutation.Name | go }} {{ .Mutation.Type | ref }}

type {{ .Subscription.Name | go }} {{ .Subscription.Type | ref }}

{{- range $name, $element := .Fragment }}
	type  {{ .Name | go  }} {{ .Type | ref }}
{{- end }}

{{- range $name, $element := .OperationResponse }}
    type  {{ .Name | go  }} {{ .Type | ref }}
{{- end }}

{{- range $model := .Operation}}
    const {{ $model.Name|go }}Query = `{{ $model.Operation }}`

    {{ if or (eq $model.Kind "query") (eq $model.Kind "mutation") }}
        func (c *Client) {{ $model.Name|go }} (
            ctx context.Context,
            out *{{ $model.ResponseStructName | go }}{{- range $arg := .Args }},
            {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }},
            httpRequestOptions []client.HTTPRequestOption,
            httpResponseCallbacks []client.HTTPResponseCallback,
        ) error {
            vars := map[string]interface{}{
            {{- range $args := .VariableDefinitions}}
                "{{ $args.Variable }}": {{ $args.Variable | goPrivate }},
            {{- end }}
            }

            if err := c.Client.Post(ctx, out, {{ $model.Name|go }}Query, vars, httpRequestOptions, httpResponseCallbacks); err != nil {
                return err
            }

            return nil
        }
    {{ end }}

    {{ if eq $model.Kind "subscription" }}
        func (sc *SubscriptionClient) {{ $model.Name|go }} (
            out chan *{{ $model.ResponseStructName | go }}{{- range $arg := .Args }},
            {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }},
        ) (string, error) {
            vars := map[string]interface{}{
            {{- range $args := .VariableDefinitions}}
                "{{ $args.Variable }}": {{ $args.Variable | goPrivate }},
            {{- end }}
            }

            rawMsgs := make(chan *json.RawMessage)
            subID, err := sc.Client.Subscribe(rawMsgs, {{ $model.ResponseStructName | go }}{}, vars)
            if err != nil {
                return "", err
            }

            for msg := range rawMsgs {
                obj := &{{ $model.ResponseStructName | go }}{}
                if err := json.Unmarshal(*msg, obj); err != nil {
                    return "", err
                }

                out <- obj
            }

            return subID, nil
        }
        

    {{ end }}
{{- end}}
